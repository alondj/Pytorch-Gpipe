graph(%0 : Float(10, 3, 224, 224)
      %1 : Float(64, 3, 11, 11)
      %2 : Float(64)
      %3 : Float(192, 64, 5, 5)
      %4 : Float(192)
      %5 : Float(384, 192, 3, 3)
      %6 : Float(384)
      %7 : Float(256, 384, 3, 3)
      %8 : Float(256)
      %9 : Float(256, 256, 3, 3)
      %10 : Float(256)
      %11 : Float(4096, 9216)
      %12 : Float(4096)
      %13 : Float(4096, 4096)
      %14 : Float(4096)
      %15 : Float(1000, 4096)
      %16 : Float(1000)) {
  %17 : int = prim::Constant[value=4](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %18 : int = prim::Constant[value=4](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %19 : int[] = prim::ListConstruct(%17, %18), scope: AlexNet/Sequential[features]/Conv2d[0]
  %20 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %21 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %22 : int[] = prim::ListConstruct(%20, %21), scope: AlexNet/Sequential[features]/Conv2d[0]
  %23 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %24 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %25 : int[] = prim::ListConstruct(%23, %24), scope: AlexNet/Sequential[features]/Conv2d[0]
  %26 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %27 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %28 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %29 : int[] = prim::ListConstruct(%27, %28), scope: AlexNet/Sequential[features]/Conv2d[0]
  %30 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %31 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %32 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %33 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %input.1 : Float(10, 64, 55, 55) = aten::_convolution(%0, %1, %2, %19, %22, %25, %26, %29, %30, %31, %32, %33), scope: AlexNet/Sequential[features]/Conv2d[0]
  %35 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[1]
  %36 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[1]
  %input.2 : Float(10, 64, 55, 55) = aten::threshold_(%input.1, %35, %36), scope: AlexNet/Sequential[features]/ReLU[1]
  %38 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %39 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %40 : int[] = prim::ListConstruct(%38, %39), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %41 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %42 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %43 : int[] = prim::ListConstruct(%41, %42), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %44 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %45 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %46 : int[] = prim::ListConstruct(%44, %45), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %47 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %48 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %49 : int[] = prim::ListConstruct(%47, %48), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %50 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %51 : Float(10, 64, 27, 27), %52 : Long(10, 64, 27, 27) = aten::max_pool2d_with_indices(%input.2, %40, %43, %46, %49, %50), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %53 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %54 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %55 : int[] = prim::ListConstruct(%53, %54), scope: AlexNet/Sequential[features]/Conv2d[3]
  %56 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %57 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %58 : int[] = prim::ListConstruct(%56, %57), scope: AlexNet/Sequential[features]/Conv2d[3]
  %59 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %60 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %61 : int[] = prim::ListConstruct(%59, %60), scope: AlexNet/Sequential[features]/Conv2d[3]
  %62 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %63 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %64 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %65 : int[] = prim::ListConstruct(%63, %64), scope: AlexNet/Sequential[features]/Conv2d[3]
  %66 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %67 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %68 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %69 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[3]
  %input.3 : Float(10, 192, 27, 27) = aten::_convolution(%51, %3, %4, %55, %58, %61, %62, %65, %66, %67, %68, %69), scope: AlexNet/Sequential[features]/Conv2d[3]
  %71 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[4]
  %72 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[4]
  %input.4 : Float(10, 192, 27, 27) = aten::threshold_(%input.3, %71, %72), scope: AlexNet/Sequential[features]/ReLU[4]
  %74 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %75 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %76 : int[] = prim::ListConstruct(%74, %75), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %77 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %78 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %79 : int[] = prim::ListConstruct(%77, %78), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %80 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %81 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %82 : int[] = prim::ListConstruct(%80, %81), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %83 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %84 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %85 : int[] = prim::ListConstruct(%83, %84), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %86 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %87 : Float(10, 192, 13, 13), %88 : Long(10, 192, 13, 13) = aten::max_pool2d_with_indices(%input.4, %76, %79, %82, %85, %86), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %89 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %90 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %91 : int[] = prim::ListConstruct(%89, %90), scope: AlexNet/Sequential[features]/Conv2d[6]
  %92 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %93 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %94 : int[] = prim::ListConstruct(%92, %93), scope: AlexNet/Sequential[features]/Conv2d[6]
  %95 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %96 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %97 : int[] = prim::ListConstruct(%95, %96), scope: AlexNet/Sequential[features]/Conv2d[6]
  %98 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %99 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %100 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %101 : int[] = prim::ListConstruct(%99, %100), scope: AlexNet/Sequential[features]/Conv2d[6]
  %102 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %103 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %104 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %105 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[6]
  %input.5 : Float(10, 384, 13, 13) = aten::_convolution(%87, %5, %6, %91, %94, %97, %98, %101, %102, %103, %104, %105), scope: AlexNet/Sequential[features]/Conv2d[6]
  %107 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[7]
  %108 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[7]
  %109 : Float(10, 384, 13, 13) = aten::threshold_(%input.5, %107, %108), scope: AlexNet/Sequential[features]/ReLU[7]
  %110 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %111 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %112 : int[] = prim::ListConstruct(%110, %111), scope: AlexNet/Sequential[features]/Conv2d[8]
  %113 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %114 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %115 : int[] = prim::ListConstruct(%113, %114), scope: AlexNet/Sequential[features]/Conv2d[8]
  %116 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %117 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %118 : int[] = prim::ListConstruct(%116, %117), scope: AlexNet/Sequential[features]/Conv2d[8]
  %119 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %120 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %121 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %122 : int[] = prim::ListConstruct(%120, %121), scope: AlexNet/Sequential[features]/Conv2d[8]
  %123 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %124 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %125 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %126 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[8]
  %input.6 : Float(10, 256, 13, 13) = aten::_convolution(%109, %7, %8, %112, %115, %118, %119, %122, %123, %124, %125, %126), scope: AlexNet/Sequential[features]/Conv2d[8]
  %128 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[9]
  %129 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[9]
  %130 : Float(10, 256, 13, 13) = aten::threshold_(%input.6, %128, %129), scope: AlexNet/Sequential[features]/ReLU[9]
  %131 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %132 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %133 : int[] = prim::ListConstruct(%131, %132), scope: AlexNet/Sequential[features]/Conv2d[10]
  %134 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %135 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %136 : int[] = prim::ListConstruct(%134, %135), scope: AlexNet/Sequential[features]/Conv2d[10]
  %137 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %138 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %139 : int[] = prim::ListConstruct(%137, %138), scope: AlexNet/Sequential[features]/Conv2d[10]
  %140 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %141 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %142 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %143 : int[] = prim::ListConstruct(%141, %142), scope: AlexNet/Sequential[features]/Conv2d[10]
  %144 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %145 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %146 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %147 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[10]
  %input.7 : Float(10, 256, 13, 13) = aten::_convolution(%130, %9, %10, %133, %136, %139, %140, %143, %144, %145, %146, %147), scope: AlexNet/Sequential[features]/Conv2d[10]
  %149 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[11]
  %150 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/ReLU[11]
  %input.8 : Float(10, 256, 13, 13) = aten::threshold_(%input.7, %149, %150), scope: AlexNet/Sequential[features]/ReLU[11]
  %152 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %153 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %154 : int[] = prim::ListConstruct(%152, %153), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %155 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %156 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %157 : int[] = prim::ListConstruct(%155, %156), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %158 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %159 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %160 : int[] = prim::ListConstruct(%158, %159), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %161 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %162 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %163 : int[] = prim::ListConstruct(%161, %162), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %164 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %input.9 : Float(10, 256, 6, 6), %166 : Long(10, 256, 6, 6) = aten::max_pool2d_with_indices(%input.8, %154, %157, %160, %163, %164), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %167 : int = prim::Constant[value=0](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %168 : int = aten::size(%input.9, %167), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %169 : Long() = prim::NumToTensor(%168), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %170 : int = prim::Constant[value=1](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %171 : int = aten::size(%input.9, %170), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %172 : Long() = prim::NumToTensor(%171), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %173 : int = prim::Constant[value=2](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %174 : int = aten::size(%input.9, %173), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %175 : Long() = prim::NumToTensor(%174), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %176 : int = prim::Constant[value=3](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %177 : int = aten::size(%input.9, %176), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %178 : Long() = prim::NumToTensor(%177), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %179 : int = prim::Constant[value=6](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %180 : int = prim::Constant[value=6](), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %181 : int[] = prim::ListConstruct(%179, %180), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %182 : Float(10, 256, 6, 6) = aten::adaptive_avg_pool2d(%input.9, %181), scope: AlexNet/AdaptiveAvgPool2d[avgpool]
  %183 : int = prim::Constant[value=0](), scope: AlexNet
  %184 : int = aten::size(%182, %183), scope: AlexNet
  %185 : Long() = prim::NumToTensor(%184), scope: AlexNet
  %186 : int = prim::Int(%185), scope: AlexNet
  %187 : int = prim::Constant[value=9216](), scope: AlexNet
  %188 : int[] = prim::ListConstruct(%186, %187), scope: AlexNet
  %input.10 : Float(10, 9216) = aten::view(%182, %188), scope: AlexNet
  %190 : float = prim::Constant[value=0.5](), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %191 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %input.11 : Float(10, 9216) = aten::dropout(%input.10, %190, %191), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %193 : Float(9216!, 4096!) = aten::t(%11), scope: AlexNet/Sequential[classifier]/Linear[1]
  %194 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Linear[1]
  %195 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Linear[1]
  %input.12 : Float(10, 4096) = aten::addmm(%12, %input.11, %193, %194, %195), scope: AlexNet/Sequential[classifier]/Linear[1]
  %197 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[classifier]/ReLU[2]
  %198 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[classifier]/ReLU[2]
  %input.13 : Float(10, 4096) = aten::threshold_(%input.12, %197, %198), scope: AlexNet/Sequential[classifier]/ReLU[2]
  %200 : float = prim::Constant[value=0.5](), scope: AlexNet/Sequential[classifier]/Dropout[3]
  %201 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Dropout[3]
  %input.14 : Float(10, 4096) = aten::dropout(%input.13, %200, %201), scope: AlexNet/Sequential[classifier]/Dropout[3]
  %203 : Float(4096!, 4096!) = aten::t(%13), scope: AlexNet/Sequential[classifier]/Linear[4]
  %204 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Linear[4]
  %205 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Linear[4]
  %input.15 : Float(10, 4096) = aten::addmm(%14, %input.14, %203, %204, %205), scope: AlexNet/Sequential[classifier]/Linear[4]
  %207 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[classifier]/ReLU[5]
  %208 : float = prim::Constant[value=0](), scope: AlexNet/Sequential[classifier]/ReLU[5]
  %input : Float(10, 4096) = aten::threshold_(%input.15, %207, %208), scope: AlexNet/Sequential[classifier]/ReLU[5]
  %210 : Float(4096!, 1000!) = aten::t(%15), scope: AlexNet/Sequential[classifier]/Linear[6]
  %211 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Linear[6]
  %212 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[classifier]/Linear[6]
  %213 : Float(10, 1000) = aten::addmm(%16, %input, %210, %211, %212), scope: AlexNet/Sequential[classifier]/Linear[6]
  return (%213);
}
