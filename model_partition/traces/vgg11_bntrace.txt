graph(%0 : Float(10, 3, 224, 224)
      %1 : Float(64, 3, 3, 3)
      %2 : Float(64)
      %3 : Float(64)
      %4 : Float(64)
      %5 : Float(64)
      %6 : Float(64)
      %7 : Long()
      %8 : Float(128, 64, 3, 3)
      %9 : Float(128)
      %10 : Float(128)
      %11 : Float(128)
      %12 : Float(128)
      %13 : Float(128)
      %14 : Long()
      %15 : Float(256, 128, 3, 3)
      %16 : Float(256)
      %17 : Float(256)
      %18 : Float(256)
      %19 : Float(256)
      %20 : Float(256)
      %21 : Long()
      %22 : Float(256, 256, 3, 3)
      %23 : Float(256)
      %24 : Float(256)
      %25 : Float(256)
      %26 : Float(256)
      %27 : Float(256)
      %28 : Long()
      %29 : Float(512, 256, 3, 3)
      %30 : Float(512)
      %31 : Float(512)
      %32 : Float(512)
      %33 : Float(512)
      %34 : Float(512)
      %35 : Long()
      %36 : Float(512, 512, 3, 3)
      %37 : Float(512)
      %38 : Float(512)
      %39 : Float(512)
      %40 : Float(512)
      %41 : Float(512)
      %42 : Long()
      %43 : Float(512, 512, 3, 3)
      %44 : Float(512)
      %45 : Float(512)
      %46 : Float(512)
      %47 : Float(512)
      %48 : Float(512)
      %49 : Long()
      %50 : Float(512, 512, 3, 3)
      %51 : Float(512)
      %52 : Float(512)
      %53 : Float(512)
      %54 : Float(512)
      %55 : Float(512)
      %56 : Long()
      %57 : Float(4096, 25088)
      %58 : Float(4096)
      %59 : Float(4096, 4096)
      %60 : Float(4096)
      %61 : Float(1000, 4096)
      %62 : Float(1000)) {
  %63 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %64 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %65 : int[] = prim::ListConstruct(%63, %64), scope: VGG/Sequential[features]/Conv2d[0]
  %66 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %67 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %68 : int[] = prim::ListConstruct(%66, %67), scope: VGG/Sequential[features]/Conv2d[0]
  %69 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %70 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %71 : int[] = prim::ListConstruct(%69, %70), scope: VGG/Sequential[features]/Conv2d[0]
  %72 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[0]
  %73 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[0]
  %74 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[0]
  %75 : int[] = prim::ListConstruct(%73, %74), scope: VGG/Sequential[features]/Conv2d[0]
  %76 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %77 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[0]
  %78 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[0]
  %79 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[0]
  %input.1 : Float(10, 64, 224, 224) = aten::_convolution(%0, %1, %2, %65, %68, %71, %72, %75, %76, %77, %78, %79), scope: VGG/Sequential[features]/Conv2d[0]
  %81 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %82 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %83 : Long() = aten::add_(%7, %81, %82), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %84 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %85 : int = aten::size(%input.1, %84), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %86 : Long() = prim::NumToTensor(%85), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %87 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %88 : int = aten::size(%input.1, %87), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %89 : Long() = prim::NumToTensor(%88), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %90 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %91 : int = aten::size(%input.1, %90), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %92 : Long() = prim::NumToTensor(%91), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %93 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %94 : int = aten::size(%input.1, %93), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %95 : Long() = prim::NumToTensor(%94), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %96 : Long() = aten::mul_(%86, %92), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %97 : Long() = aten::mul_(%96, %95), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %98 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %99 : Byte() = aten::eq(%97, %98), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %100 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %101 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %102 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %103 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %input.2 : Float(10, 64, 224, 224) = aten::batch_norm(%input.1, %3, %4, %5, %6, %100, %101, %102, %103), scope: VGG/Sequential[features]/BatchNorm2d[1]
  %105 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[2]
  %106 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[2]
  %input.3 : Float(10, 64, 224, 224) = aten::threshold_(%input.2, %105, %106), scope: VGG/Sequential[features]/ReLU[2]
  %108 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %109 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %110 : int[] = prim::ListConstruct(%108, %109), scope: VGG/Sequential[features]/MaxPool2d[3]
  %111 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %112 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %113 : int[] = prim::ListConstruct(%111, %112), scope: VGG/Sequential[features]/MaxPool2d[3]
  %114 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %115 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %116 : int[] = prim::ListConstruct(%114, %115), scope: VGG/Sequential[features]/MaxPool2d[3]
  %117 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %118 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %119 : int[] = prim::ListConstruct(%117, %118), scope: VGG/Sequential[features]/MaxPool2d[3]
  %120 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[3]
  %121 : Float(10, 64, 112, 112), %122 : Long(10, 64, 112, 112) = aten::max_pool2d_with_indices(%input.3, %110, %113, %116, %119, %120), scope: VGG/Sequential[features]/MaxPool2d[3]
  %123 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %124 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %125 : int[] = prim::ListConstruct(%123, %124), scope: VGG/Sequential[features]/Conv2d[4]
  %126 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %127 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %128 : int[] = prim::ListConstruct(%126, %127), scope: VGG/Sequential[features]/Conv2d[4]
  %129 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %130 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %131 : int[] = prim::ListConstruct(%129, %130), scope: VGG/Sequential[features]/Conv2d[4]
  %132 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[4]
  %133 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[4]
  %134 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[4]
  %135 : int[] = prim::ListConstruct(%133, %134), scope: VGG/Sequential[features]/Conv2d[4]
  %136 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %137 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[4]
  %138 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[4]
  %139 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[4]
  %input.4 : Float(10, 128, 112, 112) = aten::_convolution(%121, %8, %9, %125, %128, %131, %132, %135, %136, %137, %138, %139), scope: VGG/Sequential[features]/Conv2d[4]
  %141 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %142 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %143 : Long() = aten::add_(%14, %141, %142), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %144 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %145 : int = aten::size(%input.4, %144), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %146 : Long() = prim::NumToTensor(%145), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %147 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %148 : int = aten::size(%input.4, %147), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %149 : Long() = prim::NumToTensor(%148), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %150 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %151 : int = aten::size(%input.4, %150), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %152 : Long() = prim::NumToTensor(%151), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %153 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %154 : int = aten::size(%input.4, %153), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %155 : Long() = prim::NumToTensor(%154), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %156 : Long() = aten::mul_(%146, %152), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %157 : Long() = aten::mul_(%156, %155), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %158 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %159 : Byte() = aten::eq(%157, %158), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %160 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %161 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %162 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %163 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %input.5 : Float(10, 128, 112, 112) = aten::batch_norm(%input.4, %10, %11, %12, %13, %160, %161, %162, %163), scope: VGG/Sequential[features]/BatchNorm2d[5]
  %165 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[6]
  %166 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[6]
  %input.6 : Float(10, 128, 112, 112) = aten::threshold_(%input.5, %165, %166), scope: VGG/Sequential[features]/ReLU[6]
  %168 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %169 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %170 : int[] = prim::ListConstruct(%168, %169), scope: VGG/Sequential[features]/MaxPool2d[7]
  %171 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %172 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %173 : int[] = prim::ListConstruct(%171, %172), scope: VGG/Sequential[features]/MaxPool2d[7]
  %174 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %175 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %176 : int[] = prim::ListConstruct(%174, %175), scope: VGG/Sequential[features]/MaxPool2d[7]
  %177 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %178 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %179 : int[] = prim::ListConstruct(%177, %178), scope: VGG/Sequential[features]/MaxPool2d[7]
  %180 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[7]
  %181 : Float(10, 128, 56, 56), %182 : Long(10, 128, 56, 56) = aten::max_pool2d_with_indices(%input.6, %170, %173, %176, %179, %180), scope: VGG/Sequential[features]/MaxPool2d[7]
  %183 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %184 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %185 : int[] = prim::ListConstruct(%183, %184), scope: VGG/Sequential[features]/Conv2d[8]
  %186 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %187 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %188 : int[] = prim::ListConstruct(%186, %187), scope: VGG/Sequential[features]/Conv2d[8]
  %189 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %190 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %191 : int[] = prim::ListConstruct(%189, %190), scope: VGG/Sequential[features]/Conv2d[8]
  %192 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[8]
  %193 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[8]
  %194 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[8]
  %195 : int[] = prim::ListConstruct(%193, %194), scope: VGG/Sequential[features]/Conv2d[8]
  %196 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %197 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[8]
  %198 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[8]
  %199 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[8]
  %input.7 : Float(10, 256, 56, 56) = aten::_convolution(%181, %15, %16, %185, %188, %191, %192, %195, %196, %197, %198, %199), scope: VGG/Sequential[features]/Conv2d[8]
  %201 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %202 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %203 : Long() = aten::add_(%21, %201, %202), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %204 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %205 : int = aten::size(%input.7, %204), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %206 : Long() = prim::NumToTensor(%205), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %207 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %208 : int = aten::size(%input.7, %207), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %209 : Long() = prim::NumToTensor(%208), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %210 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %211 : int = aten::size(%input.7, %210), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %212 : Long() = prim::NumToTensor(%211), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %213 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %214 : int = aten::size(%input.7, %213), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %215 : Long() = prim::NumToTensor(%214), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %216 : Long() = aten::mul_(%206, %212), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %217 : Long() = aten::mul_(%216, %215), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %218 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %219 : Byte() = aten::eq(%217, %218), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %220 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %221 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %222 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %223 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %input.8 : Float(10, 256, 56, 56) = aten::batch_norm(%input.7, %17, %18, %19, %20, %220, %221, %222, %223), scope: VGG/Sequential[features]/BatchNorm2d[9]
  %225 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[10]
  %226 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[10]
  %227 : Float(10, 256, 56, 56) = aten::threshold_(%input.8, %225, %226), scope: VGG/Sequential[features]/ReLU[10]
  %228 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %229 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %230 : int[] = prim::ListConstruct(%228, %229), scope: VGG/Sequential[features]/Conv2d[11]
  %231 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %232 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %233 : int[] = prim::ListConstruct(%231, %232), scope: VGG/Sequential[features]/Conv2d[11]
  %234 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %235 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %236 : int[] = prim::ListConstruct(%234, %235), scope: VGG/Sequential[features]/Conv2d[11]
  %237 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[11]
  %238 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[11]
  %239 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[11]
  %240 : int[] = prim::ListConstruct(%238, %239), scope: VGG/Sequential[features]/Conv2d[11]
  %241 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %242 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[11]
  %243 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[11]
  %244 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[11]
  %input.9 : Float(10, 256, 56, 56) = aten::_convolution(%227, %22, %23, %230, %233, %236, %237, %240, %241, %242, %243, %244), scope: VGG/Sequential[features]/Conv2d[11]
  %246 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %247 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %248 : Long() = aten::add_(%28, %246, %247), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %249 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %250 : int = aten::size(%input.9, %249), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %251 : Long() = prim::NumToTensor(%250), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %252 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %253 : int = aten::size(%input.9, %252), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %254 : Long() = prim::NumToTensor(%253), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %255 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %256 : int = aten::size(%input.9, %255), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %257 : Long() = prim::NumToTensor(%256), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %258 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %259 : int = aten::size(%input.9, %258), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %260 : Long() = prim::NumToTensor(%259), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %261 : Long() = aten::mul_(%251, %257), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %262 : Long() = aten::mul_(%261, %260), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %263 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %264 : Byte() = aten::eq(%262, %263), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %265 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %266 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %267 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %268 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %input.10 : Float(10, 256, 56, 56) = aten::batch_norm(%input.9, %24, %25, %26, %27, %265, %266, %267, %268), scope: VGG/Sequential[features]/BatchNorm2d[12]
  %270 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[13]
  %271 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[13]
  %input.11 : Float(10, 256, 56, 56) = aten::threshold_(%input.10, %270, %271), scope: VGG/Sequential[features]/ReLU[13]
  %273 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %274 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %275 : int[] = prim::ListConstruct(%273, %274), scope: VGG/Sequential[features]/MaxPool2d[14]
  %276 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %277 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %278 : int[] = prim::ListConstruct(%276, %277), scope: VGG/Sequential[features]/MaxPool2d[14]
  %279 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %280 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %281 : int[] = prim::ListConstruct(%279, %280), scope: VGG/Sequential[features]/MaxPool2d[14]
  %282 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %283 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %284 : int[] = prim::ListConstruct(%282, %283), scope: VGG/Sequential[features]/MaxPool2d[14]
  %285 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[14]
  %286 : Float(10, 256, 28, 28), %287 : Long(10, 256, 28, 28) = aten::max_pool2d_with_indices(%input.11, %275, %278, %281, %284, %285), scope: VGG/Sequential[features]/MaxPool2d[14]
  %288 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %289 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %290 : int[] = prim::ListConstruct(%288, %289), scope: VGG/Sequential[features]/Conv2d[15]
  %291 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %292 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %293 : int[] = prim::ListConstruct(%291, %292), scope: VGG/Sequential[features]/Conv2d[15]
  %294 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %295 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %296 : int[] = prim::ListConstruct(%294, %295), scope: VGG/Sequential[features]/Conv2d[15]
  %297 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[15]
  %298 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[15]
  %299 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[15]
  %300 : int[] = prim::ListConstruct(%298, %299), scope: VGG/Sequential[features]/Conv2d[15]
  %301 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %302 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[15]
  %303 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[15]
  %304 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[15]
  %input.12 : Float(10, 512, 28, 28) = aten::_convolution(%286, %29, %30, %290, %293, %296, %297, %300, %301, %302, %303, %304), scope: VGG/Sequential[features]/Conv2d[15]
  %306 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %307 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %308 : Long() = aten::add_(%35, %306, %307), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %309 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %310 : int = aten::size(%input.12, %309), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %311 : Long() = prim::NumToTensor(%310), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %312 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %313 : int = aten::size(%input.12, %312), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %314 : Long() = prim::NumToTensor(%313), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %315 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %316 : int = aten::size(%input.12, %315), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %317 : Long() = prim::NumToTensor(%316), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %318 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %319 : int = aten::size(%input.12, %318), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %320 : Long() = prim::NumToTensor(%319), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %321 : Long() = aten::mul_(%311, %317), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %322 : Long() = aten::mul_(%321, %320), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %323 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %324 : Byte() = aten::eq(%322, %323), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %325 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %326 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %327 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %328 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %input.13 : Float(10, 512, 28, 28) = aten::batch_norm(%input.12, %31, %32, %33, %34, %325, %326, %327, %328), scope: VGG/Sequential[features]/BatchNorm2d[16]
  %330 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[17]
  %331 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[17]
  %332 : Float(10, 512, 28, 28) = aten::threshold_(%input.13, %330, %331), scope: VGG/Sequential[features]/ReLU[17]
  %333 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %334 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %335 : int[] = prim::ListConstruct(%333, %334), scope: VGG/Sequential[features]/Conv2d[18]
  %336 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %337 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %338 : int[] = prim::ListConstruct(%336, %337), scope: VGG/Sequential[features]/Conv2d[18]
  %339 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %340 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %341 : int[] = prim::ListConstruct(%339, %340), scope: VGG/Sequential[features]/Conv2d[18]
  %342 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[18]
  %343 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[18]
  %344 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[18]
  %345 : int[] = prim::ListConstruct(%343, %344), scope: VGG/Sequential[features]/Conv2d[18]
  %346 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %347 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[18]
  %348 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[18]
  %349 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[18]
  %input.14 : Float(10, 512, 28, 28) = aten::_convolution(%332, %36, %37, %335, %338, %341, %342, %345, %346, %347, %348, %349), scope: VGG/Sequential[features]/Conv2d[18]
  %351 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %352 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %353 : Long() = aten::add_(%42, %351, %352), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %354 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %355 : int = aten::size(%input.14, %354), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %356 : Long() = prim::NumToTensor(%355), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %357 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %358 : int = aten::size(%input.14, %357), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %359 : Long() = prim::NumToTensor(%358), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %360 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %361 : int = aten::size(%input.14, %360), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %362 : Long() = prim::NumToTensor(%361), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %363 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %364 : int = aten::size(%input.14, %363), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %365 : Long() = prim::NumToTensor(%364), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %366 : Long() = aten::mul_(%356, %362), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %367 : Long() = aten::mul_(%366, %365), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %368 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %369 : Byte() = aten::eq(%367, %368), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %370 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %371 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %372 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %373 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %input.15 : Float(10, 512, 28, 28) = aten::batch_norm(%input.14, %38, %39, %40, %41, %370, %371, %372, %373), scope: VGG/Sequential[features]/BatchNorm2d[19]
  %375 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[20]
  %376 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[20]
  %input.16 : Float(10, 512, 28, 28) = aten::threshold_(%input.15, %375, %376), scope: VGG/Sequential[features]/ReLU[20]
  %378 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %379 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %380 : int[] = prim::ListConstruct(%378, %379), scope: VGG/Sequential[features]/MaxPool2d[21]
  %381 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %382 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %383 : int[] = prim::ListConstruct(%381, %382), scope: VGG/Sequential[features]/MaxPool2d[21]
  %384 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %385 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %386 : int[] = prim::ListConstruct(%384, %385), scope: VGG/Sequential[features]/MaxPool2d[21]
  %387 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %388 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %389 : int[] = prim::ListConstruct(%387, %388), scope: VGG/Sequential[features]/MaxPool2d[21]
  %390 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[21]
  %391 : Float(10, 512, 14, 14), %392 : Long(10, 512, 14, 14) = aten::max_pool2d_with_indices(%input.16, %380, %383, %386, %389, %390), scope: VGG/Sequential[features]/MaxPool2d[21]
  %393 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %394 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %395 : int[] = prim::ListConstruct(%393, %394), scope: VGG/Sequential[features]/Conv2d[22]
  %396 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %397 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %398 : int[] = prim::ListConstruct(%396, %397), scope: VGG/Sequential[features]/Conv2d[22]
  %399 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %400 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %401 : int[] = prim::ListConstruct(%399, %400), scope: VGG/Sequential[features]/Conv2d[22]
  %402 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[22]
  %403 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[22]
  %404 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[22]
  %405 : int[] = prim::ListConstruct(%403, %404), scope: VGG/Sequential[features]/Conv2d[22]
  %406 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %407 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[22]
  %408 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[22]
  %409 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[22]
  %input.17 : Float(10, 512, 14, 14) = aten::_convolution(%391, %43, %44, %395, %398, %401, %402, %405, %406, %407, %408, %409), scope: VGG/Sequential[features]/Conv2d[22]
  %411 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %412 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %413 : Long() = aten::add_(%49, %411, %412), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %414 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %415 : int = aten::size(%input.17, %414), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %416 : Long() = prim::NumToTensor(%415), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %417 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %418 : int = aten::size(%input.17, %417), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %419 : Long() = prim::NumToTensor(%418), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %420 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %421 : int = aten::size(%input.17, %420), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %422 : Long() = prim::NumToTensor(%421), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %423 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %424 : int = aten::size(%input.17, %423), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %425 : Long() = prim::NumToTensor(%424), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %426 : Long() = aten::mul_(%416, %422), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %427 : Long() = aten::mul_(%426, %425), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %428 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %429 : Byte() = aten::eq(%427, %428), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %430 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %431 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %432 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %433 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %input.18 : Float(10, 512, 14, 14) = aten::batch_norm(%input.17, %45, %46, %47, %48, %430, %431, %432, %433), scope: VGG/Sequential[features]/BatchNorm2d[23]
  %435 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[24]
  %436 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[24]
  %437 : Float(10, 512, 14, 14) = aten::threshold_(%input.18, %435, %436), scope: VGG/Sequential[features]/ReLU[24]
  %438 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %439 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %440 : int[] = prim::ListConstruct(%438, %439), scope: VGG/Sequential[features]/Conv2d[25]
  %441 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %442 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %443 : int[] = prim::ListConstruct(%441, %442), scope: VGG/Sequential[features]/Conv2d[25]
  %444 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %445 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %446 : int[] = prim::ListConstruct(%444, %445), scope: VGG/Sequential[features]/Conv2d[25]
  %447 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[25]
  %448 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[25]
  %449 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[25]
  %450 : int[] = prim::ListConstruct(%448, %449), scope: VGG/Sequential[features]/Conv2d[25]
  %451 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %452 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[25]
  %453 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/Conv2d[25]
  %454 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/Conv2d[25]
  %input.19 : Float(10, 512, 14, 14) = aten::_convolution(%437, %50, %51, %440, %443, %446, %447, %450, %451, %452, %453, %454), scope: VGG/Sequential[features]/Conv2d[25]
  %456 : Long() = prim::Constant[value={1}](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %457 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %458 : Long() = aten::add_(%56, %456, %457), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %459 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %460 : int = aten::size(%input.19, %459), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %461 : Long() = prim::NumToTensor(%460), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %462 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %463 : int = aten::size(%input.19, %462), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %464 : Long() = prim::NumToTensor(%463), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %465 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %466 : int = aten::size(%input.19, %465), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %467 : Long() = prim::NumToTensor(%466), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %468 : int = prim::Constant[value=3](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %469 : int = aten::size(%input.19, %468), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %470 : Long() = prim::NumToTensor(%469), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %471 : Long() = aten::mul_(%461, %467), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %472 : Long() = aten::mul_(%471, %470), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %473 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %474 : Byte() = aten::eq(%472, %473), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %475 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %476 : float = prim::Constant[value=0.1](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %477 : float = prim::Constant[value=1e-05](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %478 : bool = prim::Constant[value=1](), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %input.20 : Float(10, 512, 14, 14) = aten::batch_norm(%input.19, %52, %53, %54, %55, %475, %476, %477, %478), scope: VGG/Sequential[features]/BatchNorm2d[26]
  %480 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[27]
  %481 : float = prim::Constant[value=0](), scope: VGG/Sequential[features]/ReLU[27]
  %input.21 : Float(10, 512, 14, 14) = aten::threshold_(%input.20, %480, %481), scope: VGG/Sequential[features]/ReLU[27]
  %483 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %484 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %485 : int[] = prim::ListConstruct(%483, %484), scope: VGG/Sequential[features]/MaxPool2d[28]
  %486 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %487 : int = prim::Constant[value=2](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %488 : int[] = prim::ListConstruct(%486, %487), scope: VGG/Sequential[features]/MaxPool2d[28]
  %489 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %490 : int = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %491 : int[] = prim::ListConstruct(%489, %490), scope: VGG/Sequential[features]/MaxPool2d[28]
  %492 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %493 : int = prim::Constant[value=1](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %494 : int[] = prim::ListConstruct(%492, %493), scope: VGG/Sequential[features]/MaxPool2d[28]
  %495 : bool = prim::Constant[value=0](), scope: VGG/Sequential[features]/MaxPool2d[28]
  %input.22 : Float(10, 512, 7, 7), %497 : Long(10, 512, 7, 7) = aten::max_pool2d_with_indices(%input.21, %485, %488, %491, %494, %495), scope: VGG/Sequential[features]/MaxPool2d[28]
  %498 : int = prim::Constant[value=0](), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %499 : int = aten::size(%input.22, %498), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %500 : Long() = prim::NumToTensor(%499), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %501 : int = prim::Constant[value=1](), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %502 : int = aten::size(%input.22, %501), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %503 : Long() = prim::NumToTensor(%502), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %504 : int = prim::Constant[value=2](), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %505 : int = aten::size(%input.22, %504), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %506 : Long() = prim::NumToTensor(%505), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %507 : int = prim::Constant[value=3](), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %508 : int = aten::size(%input.22, %507), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %509 : Long() = prim::NumToTensor(%508), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %510 : int = prim::Constant[value=7](), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %511 : int = prim::Constant[value=7](), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %512 : int[] = prim::ListConstruct(%510, %511), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %513 : Float(10, 512, 7, 7) = aten::adaptive_avg_pool2d(%input.22, %512), scope: VGG/AdaptiveAvgPool2d[avgpool]
  %514 : int = prim::Constant[value=0](), scope: VGG
  %515 : int = aten::size(%513, %514), scope: VGG
  %516 : Long() = prim::NumToTensor(%515), scope: VGG
  %517 : int = prim::Int(%516), scope: VGG
  %518 : int = prim::Constant[value=-1](), scope: VGG
  %519 : int[] = prim::ListConstruct(%517, %518), scope: VGG
  %input.23 : Float(10, 25088) = aten::view(%513, %519), scope: VGG
  %521 : Float(25088!, 4096!) = aten::t(%57), scope: VGG/Sequential[classifier]/Linear[0]
  %522 : int = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Linear[0]
  %523 : int = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Linear[0]
  %input.24 : Float(10, 4096) = aten::addmm(%58, %input.23, %521, %522, %523), scope: VGG/Sequential[classifier]/Linear[0]
  %525 : float = prim::Constant[value=0](), scope: VGG/Sequential[classifier]/ReLU[1]
  %526 : float = prim::Constant[value=0](), scope: VGG/Sequential[classifier]/ReLU[1]
  %input.25 : Float(10, 4096) = aten::threshold_(%input.24, %525, %526), scope: VGG/Sequential[classifier]/ReLU[1]
  %528 : float = prim::Constant[value=0.5](), scope: VGG/Sequential[classifier]/Dropout[2]
  %529 : bool = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Dropout[2]
  %input.26 : Float(10, 4096) = aten::dropout(%input.25, %528, %529), scope: VGG/Sequential[classifier]/Dropout[2]
  %531 : Float(4096!, 4096!) = aten::t(%59), scope: VGG/Sequential[classifier]/Linear[3]
  %532 : int = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Linear[3]
  %533 : int = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Linear[3]
  %input.27 : Float(10, 4096) = aten::addmm(%60, %input.26, %531, %532, %533), scope: VGG/Sequential[classifier]/Linear[3]
  %535 : float = prim::Constant[value=0](), scope: VGG/Sequential[classifier]/ReLU[4]
  %536 : float = prim::Constant[value=0](), scope: VGG/Sequential[classifier]/ReLU[4]
  %input.28 : Float(10, 4096) = aten::threshold_(%input.27, %535, %536), scope: VGG/Sequential[classifier]/ReLU[4]
  %538 : float = prim::Constant[value=0.5](), scope: VGG/Sequential[classifier]/Dropout[5]
  %539 : bool = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Dropout[5]
  %input : Float(10, 4096) = aten::dropout(%input.28, %538, %539), scope: VGG/Sequential[classifier]/Dropout[5]
  %541 : Float(4096!, 1000!) = aten::t(%61), scope: VGG/Sequential[classifier]/Linear[6]
  %542 : int = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Linear[6]
  %543 : int = prim::Constant[value=1](), scope: VGG/Sequential[classifier]/Linear[6]
  %544 : Float(10, 1000) = aten::addmm(%62, %input, %541, %542, %543), scope: VGG/Sequential[classifier]/Linear[6]
  return (%544);
}
